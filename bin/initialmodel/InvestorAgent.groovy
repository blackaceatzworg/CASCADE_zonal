/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package bin.initialmodel

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*

/**
 *
 * This is an agent.
 *
 */
public class InvestorAgent  {

    /**
     *
     * This is an agent property.
     * @field invso
     *
     */
    @Parameter (displayName = "Investment in solar", usageName = "invso")
    public def getInvso() {
        return invso
    }
    public void setInvso(def newValue) {
        invso = newValue
    }
    public def invso = 1

    /**
     *
     * This is an agent property.
     * @field invw
     *
     */
    @Parameter (displayName = "Investment in wind", usageName = "invw")
    public def getInvw() {
        return invw
    }
    public void setInvw(def newValue) {
        invw = newValue
    }
    public def invw = 1

    /**
     *
     * This is an agent property.
     * @field sumattw
     *
     */
    @Parameter (displayName = "Sum of wind attractivity", usageName = "sumattw")
    public def getSumattw() {
        return sumattw
    }
    public void setSumattw(def newValue) {
        sumattw = newValue
    }
    public def sumattw = 1000000000000

    /**
     *
     * This is an agent property.
     * @field sumattso
     *
     */
    @Parameter (displayName = "Sum of solar attractivity", usageName = "sumattso")
    public def getSumattso() {
        return sumattso
    }
    public void setSumattso(def newValue) {
        sumattso = newValue
    }
    public def sumattso = 1000000000

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "InvestorAgent " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method step
     *
     */
    @ScheduledMethod(
        start = 2d,
        interval = 1d,
        shuffle = true
    )
    public def step() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Context context = FindContext("initialModel"); Iterator myAgents = context.getAgentLayer(ZonalAgent).iterator()
        float tempso = 0; float tempw = 0;

        // This is a loop.
        while (myAgents.hasNext()) {

            // This is a task.
            tempso = tempso + myAgents.next().getAttso();
            tempw = tempw + myAgents.next().getAttw();

        }

        // This is a task.
        this.setSumattso(tempso); 
        this.setSumattw(tempw);
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

