/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package bin.initialmodel

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*
import java.io.File
import com.vividsolutions.jts.geom.*

/**
 *
 * This is an agent.
 *
 */
public class ModelInitializer  {

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "ModelInitializer " + (agentIDCounter++)

    /**
     *
     * This is the user model builder
     * @method initializeModel
     *
     */
    @ScheduledMethod(
        start = 0d,
        shuffle = true
    )
    public static def initializeModel() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        File coords = new File("C:/Program Files/RepastSimphony-1.2.0/workspace/InitialModel/inputFiles/zoneCoords.csv");
        BufferedReader myReader = new BufferedReader(new FileReader(coords));
        String tempString = myReader.readLine(); //Discard header line (hack we know format)
        String [] tempArray = new String[3]
        // This is a task.
        File centres = new File("C:/Program Files/RepastSimphony-1.2.0/workspace/InitialModel/inputFiles/centres.csv");
        BufferedReader centresReader = new BufferedReader(new FileReader(centres));
        File popFile = new File("C:/Program Files/RepastSimphony-1.2.0/workspace/InitialModel/inputFiles/pop.csv");
        BufferedReader popReader = new BufferedReader(new FileReader(popFile));
        File windyFile = new File("C:/Program Files/RepastSimphony-1.2.0/workspace/InitialModel/inputFiles/windy.csv");
        BufferedReader windyReader = new BufferedReader(new FileReader(windyFile));
        // This is a task.
        Geography initialGeog = FindGeography("geography");
        GeometryFactory thisFactory = new GeometryFactory();
        Context context = FindContext("initialModel")
        if (context == null){System.out.println("Context null!!")};

        // This is a loop.
        for (i in 1..100) {

            // This is a task.
            ZonalAgent thisAgent = new ZonalAgent();
            context.add(thisAgent);
            tempString = myReader.readLine(); 
            tempArray = tempString.split(",");
            thisAgent.setLongitude(Float.parseFloat(tempArray[1]));
            thisAgent.setLatitude(Float.parseFloat(tempArray[2]));
            Coordinate thisCoordinate = new Coordinate(thisAgent.getLongitude(), thisAgent.getLatitude());
            initialGeog.move(thisAgent,thisFactory.createPoint(thisCoordinate));
            tempString = centresReader.readLine(); 
            tempArray = tempString.split(",");
            thisAgent.setJob(Float.parseFloat(tempArray[0]));
            thisAgent.setPry(Float.parseFloat(tempArray[1]));
            thisAgent.setPrice(Float.parseFloat(tempArray[2]));
            tempString = popReader.readLine();thisAgent.setPop(Float.parseFloat(tempString))
            if (i == 51) {thisAgent.setProdZone(true)}
            tempString = windyReader.readLine();thisAgent.setWindy(Float.parseFloat(tempString)); thisAgent.setSun(2+(0.2*(58 - thisAgent.getLatitude())));

        }

        // This is a task.
        InvestorAgent thisAgent = new InvestorAgent();
        context.add(thisAgent);
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

